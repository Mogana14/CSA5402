import hashlib
def calculate_hash(file_path, algorithm='sha256'):
    hasher = None
    if algorithm.lower() == 'md5':
        hasher = hashlib.md5()
    elif algorithm.lower() == 'sha256':
        hasher = hashlib.sha256()
    elif algorithm.lower() == 'sha512':
        hasher = hashlib.sha512()
    else:
        raise ValueError("Unsupported hash algorithm. Use 'md5', 'sha256', or 'sha512'.")
    
    with open(file_path, 'rb') as file:
        while chunk := file.read(4096): 
            hasher.update(chunk)
   return hasher.hexdigest()
def compare_file_integrity(file_path, expected_hash, algorithm='sha256'):
    calculated_hash = calculate_hash(file_path, algorithm)
    return calculated_hash == expected_hash
if __name__ == "__main__":
    file_path = input("Enter the file path: ")
    
    print("Calculating hashes...")
    md5_hash = calculate_hash(file_path, 'md5')
    sha256_hash = calculate_hash(file_path, 'sha256')
    sha512_hash = calculate_hash(file_path, 'sha512')
    
    print(f"MD5: {md5_hash}")
    print(f"SHA-256: {sha256_hash}")
    print(f"SHA-512: {sha512_hash}")
    
    expected_hash = input("Enter the expected hash to verify integrity: ")
    algorithm = input("Enter the hash algorithm used (md5/sha256/sha512): ")
    
    if compare_file_integrity(file_path, expected_hash, algorithm):
        print("File integrity verified: Hashes match!")
    else:
        print("File integrity compromised: Hashes do not match!")

import secrets
import hmac
import hashlib
import base64
import time

# Generate a secret key for the user
def generate_secret():
    return base64.b32encode(secrets.token_bytes(10)).decode('utf-8')

# Generate a time-based one-time password (TOTP)
def generate_otp(secret, interval=30):
    counter = int(time.time()) // interval
    key = base64.b32decode(secret)
    msg = counter.to_bytes(8, 'big')
    hmac_digest = hmac.new(key, msg, hashlib.sha1).digest()
    
    offset = hmac_digest[-1] & 0x0F
    code = (int.from_bytes(hmac_digest[offset:offset+4], 'big') & 0x7FFFFFFF) % 1000000
    return f'{code:06d}'

# Verify OTP
def verify_otp(secret, otp, interval=30):
    return otp == generate_otp(secret, interval)

# Example Usage
if __name__ == "__main__":
    user_secret = generate_secret()
    print(f"User Secret Key: {user_secret}")
    
    otp = generate_otp(user_secret)
    print(f"Generated OTP: {otp}")
    
    user_input = input("Enter OTP: ")
    if verify_otp(user_secret, user_input):
        print("Authentication Successful!")
    else:
        print("Authentication Failed!")
